syntax = "proto3";
package  com.ime.iov.gbt32960;
option java_multiple_files = true;

message LoginRequest {
    int64 record_time = 1;
    int32 login_day_seq = 2;
    string iccid = 3;
    int32 system_code_length = 4;
    repeated string chargeable_subsystem_code = 5;
}

message LogoutRequest {
    int64 record_time = 1;
    int64 logout_day_seq = 2;
}

message VehicleState {

    enum OperatingState {
        _1 = 0;//unused
        RUN = 1;
        CLOSE = 2;
        OTHER = 3;
        OP_EXCEPTION = 0xFE;
        OP_INVALID = 0xFF;
    }

    OperatingState operating_state = 1;


    enum ChargeState {
        _2 = 0;//unused
        PARKING=1;
        DRIVING=2;
        OUTAGE = 3;
        COMPLETED=4;
        CHARGE_EXCEPTION = 0xFE;
        CHARGE_INVALID = 0xFF;
    }

    ChargeState charging_State = 2;

    enum OperationMode {
        _3 = 0;//unused
        ELECTRIC_ONLY = 1;
        MIXED = 2;
        FUEL_ONLY = 3;
        OM_EXCEPTION = 0xFE;
        OM_INVALID = 0xFF;
    }


    OperationMode operation_mode = 3;

    float speed = 4;
    double mileage = 5;
    float voltage = 6;
    float current = 7;
    int32 state_of_charge = 8;

    enum DcInverterState {
        _4 = 0;//unused
        ON = 1;
        OFF = 2;
        DC_EXCEPTION = 0xFE;
        DC_INVALID = 0xFF;
    }

    DcInverterState dc_inverter_state = 9;
    int32 gear_position = 10;
    int32 insulance = 11;

    int32 accelerator_travel = 12; //加速踏板行程
    int32 brake_travel = 13;  //刹车踏板行程
}

message RealTimeReport {
    int64 record_time = 1;
    bool reissue = 2;
    VehicleState vehicleState = 3;
    repeated MotorState motor = 4;
    FuelCell fuelCell = 5;
    Engine engine = 6;
    VehicleLocation location = 7;
    Extremum extremum = 8;
    Alarm alarm = 9;
    repeated ChargeableSubsystemElectric chargeSystemElectric = 10;
    repeated ChargeableSubsystemTemperature chargeSystemTemperature = 11;
}

//驱动电机
message MotorState {
    int64 motor_seq = 1;
    enum MotorStatus {
        _1 = 0;//unused
        CONSUMING = 1;
        GENERATING = 2;
        OFF = 3;
        READY = 4;
        MOTOR_EXCEPTION = 0xFE;
        MOTOR_INVALID = 0xFF;
    }
    MotorStatus status = 8;
    int32 controller_temperature = 2;
    int32 motor_speed = 3;
    float motor_torque = 4; //驱动电机转矩
    int32 motor_temperature = 5;
    float controller_voltage = 6;
    float controller_current = 7; //电机控制器直流母线电流
}

// 燃料电池数据
message FuelCell {
    double fuel_cell_voltage = 1;                    // 燃料电池电压
    double fuel_cell_current = 2;                    // 燃料电池电流
    double fuel_consumption_rate = 3;                // 燃料消耗率
    int32 total_number_of_fctp = 4;                  // 燃料电池温度探针总数
    repeated int32 probe_temperature_value = 5;      // 探针温度值
    double highest_temp_of_hydrogen_system = 6;      // 氢系统中最高温度
    int32 highest_temp_probe_code_of_hyd_sys = 7;    // 氢系统中最高温度探针代号
    int32 highest_con_of_hydrogen = 8;               // 氢气最高浓度
    int32 highest_hy_con_sensor_code = 9;            // 氢气最高浓度传感器代号
    double hydrogen_max_pressure = 10;               // 氢气最高压力
    int32 hydrogen_max_pressure_sensor_code = 11;    // 氢气最高压力传感器代号
    enum HighVoltageDCState {
        _1 = 0; // unused
        ON = 1;     // 工作
        OFF = 2;    // 断开
        HIGH_VOLTAGE_DC_EXCEPTION = 0xFE;
        HIGH_VOLTAGE_DC_INVALID = 0xFF;
    }
    HighVoltageDCState high_voltage_dc_state = 12;               // 高压DC/DC状态
}

// 发动机数据
message Engine {
    enum EngineState {
        _1 = 0; // unused
        START = 1; // 启动
        CLOSE = 2; // 关闭
        ENGINE_EXCEPTION = 0xFE;
        ENGINE_INVALID = 0xFF;
    }
    EngineState engine_state = 1;           // 发动机状态
    int32 crankshaft_speed = 2;             // 曲轴转速
    double fuel_consumption_rate = 3;       // 燃料消耗率
}

//车辆位置数据
message VehicleLocation {
    bool is_valid = 1;
    double longitude = 2;
    double latitude = 3;
    //    float speed = 4;
    //    int32 direction =5;
}
//极值数据
message Extremum {
    int32 voltage_max_subsystem = 1;//最高电压电池子系统号
    int32 voltage_max_battery = 2;//最高电压电池单体代号
    float max_voltage = 3;//电池单体电压最高值
    int32 voltage_min_subsystem = 4;//最低电压电池子系统号
    int32 voltage_min_battery = 5;//最低电压电池单体代号
    float min_voltage = 6;//电池单体电压最低值
    int32 temperature_max_subsystem = 7;//最高温度子系统号
    int32 temperature_max_probe = 8;//最高温度探针序号
    int32 max_temperature = 9;//最高温度值
    int32 temperature_min_subsystem = 10;//最低温度子系统号
    int32 temperature_min_probe = 11;//最低温度探针序号
    int32 min_temperature = 12;//最低温度值
}

//报警数据
message Alarm {
    int32 max_alarm_level = 1;
    int32 alarm_bit_identify = 2;
    int32 battery_fault_num = 3;
    repeated int32 battery_fault_data = 4;
    int32 motor_fault_num = 5;
    repeated int32 motor_fault_data = 6;
    int32 engine_fault_num = 7;
    repeated int32 engine_fault_data = 8;
    int32 other_fault_num = 9;
    repeated int32 other_fault_data = 10;
}


//可充电储能子系统
message ChargeableSubsystemElectric {
    int32 chargeable_sub_system_number = 1;//可充电储能子系统号
    float voltage = 2;//可充电储能装置电压
    float current = 3;//可充电储能装置电流
    int64 battery_total_count = 4;//单体电池总数
    int64 frame_start_battery_seq = 5;//本帧起始电池序号
    repeated float battery_voltage = 7;//单体电池电压值
}


//可充电储能装置温度
message ChargeableSubsystemTemperature {
    int32 sub_system_number = 1;//可充电储能子系统号
    repeated int32 probe_temperature = 2;//可充电储能子系统各温度探针检测到的温度值
}

//终端校时
message TerminalClockCorrect {
    int64 system_time = 1;
}

message ConfigQueryRequest {
    int64 query_time = 1;
    repeated int32 parameter_ids = 2;
}

message ConfigSetupRequest {
    int64 setup_time = 1;
    repeated Parameter parameters = 2;
}

message Parameter {
    enum SamplingState {
        UNKNOWN = 0;
        ON = 1;
        OFF = 2;
        EXCEPTION = 0xFE;
        INVALID = 0xFF;
    }

    oneof parameter {
        int32 storage_period = 1;
        int32 normal_report_interval = 2;
        int32 alarm_report_interval = 3;
        int32 management_platform_domain_length = 4;
        string management_platform_domain = 5;
        int32 management_platform_port = 6;
        string hardware_version = 7;
        string firmware_version = 8;
        int32 hearbeat_interval = 9;
        int32 terminal_response_timeout = 0x0a;
        int32 platform_response_timeout = 0x0b;
        int32 login_retry_interval = 0x0c;
        int32 public_platform_domain_length = 0x0d;
        string public_platform_domain = 0x0e;
        int32 public_platform_port = 0x0f;
        SamplingState sampling = 0x10;
    }
}

message ConfigQueryResponse {
    int64 response_time = 1;

    repeated Parameter parameters = 2;
}


enum CommandType {
    UNUSED = 0;
    UPGRADE = 1;
    SHUTDOWN = 2;
    TERMINAL_RESET = 3;
    FACTORY_RESET = 4;
    DISCONECT = 5;
    WARNING = 6;
    SAMPLING_CHECK= 7;
}

message ControlCommand {
    int64 request_time = 1;
    CommandType command = 2;
}


//远程升级命令
message RemoteUpgradeCommand {
    int64 request_time = 11;
    string dial_name = 1;//拨号点名称
    string dial_account = 2;//拨号用户名
    string dial_password = 3;//拨号密码
    string address = 4;//地址
    int32 port = 5;//
    string terminal_manufacturer_id = 6;//车载终端制造商ID
    string hardware_version = 7;
    string firmware_version = 8;//固件版本
    string upgrade_url = 9;
    int32 upgrade_time_limit = 10;//连接到升级服务器时限
}

//报警/预警命令
message Warning {
    int64 request_time = 1;
    int32 level = 2;
    string content = 3;
}


message EmptyResponse {
    int32 messsage_type = 1;
    int32 result = 2;
    bool has_time = 3;
    int64 time = 4;
}

message ProtoResponse {
    int32 messsage_type = 1;
    int32 result = 2;
    oneof proto {
        LoginRequest login = 3;
    }
}

message PlatformMessage {
    oneof message {
        ConfigQueryRequest  config_query = 2;
        ConfigSetupRequest config_setup= 3;
        RemoteUpgradeCommand upgrade= 4;
        Warning warning = 5;
        ControlCommand control = 6;
        TerminalClockCorrect clock_correct = 7;
        EmptyResponse empty_response = 8;
        ProtoResponse proto_response = 9;
    }
}

message TerminalResponse {
    string vin = 1;
    oneof message {
        ConfigQueryResponse config_query = 2;
        bool setup_success = 3;
        bool control_success = 4;
    }
}

message AccessRegistration {
    string vin = 1;
    oneof message {
        LoginRequest login = 2;
        LogoutRequest logout = 3;
    }
}